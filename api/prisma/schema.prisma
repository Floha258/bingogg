// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Goal {
  id          String        @id @unique @default(cuid())
  goal        String
  description String?
  categories  String[]
  difficulty  Int?
  game        Game          @relation(fields: [gameId], references: [id])
  variants    GoalVariant[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  gameId      String
}

model GoalVariant {
  id          String   @id @unique @default(cuid())
  goal        String?
  description String?
  active      Boolean?
  baseGoal    Goal     @relation(fields: [goalId], references: [id])
  variant     Variant  @relation(fields: [variantId], references: [id])
  goalId      String
  variantId   String
}

model Variant {
  id          String        @id @unique @default(cuid())
  name        String
  description String
  goals       GoalVariant[]
  Game        Game?         @relation(fields: [gameId], references: [id])
  gameId      String?
  Room        Room[]
}

model Game {
  id          String           @id @unique @default(cuid())
  name        String
  slug        String           @unique
  coverImage  String?
  variants    Variant[]
  goals       Goal[]
  permissions GamePermission[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model GamePermission {
  id          String @id @unique @default(cuid())
  user        User   @relation(fields: [userId], references: [id])
  game        Game   @relation(fields: [gameId], references: [id])
  permissions Int
  userId      String
  gameId      String
}

model User {
  id          String           @id @unique @default(cuid())
  username    String           @unique
  password    String
  connections Connection[]
  permissions GamePermission[]
}

model Connection {
  id           String            @id @unique @default(cuid())
  service      ConnectionService
  serviceId    String
  refreshToken String?
  user         User              @relation(fields: [userId], references: [id])
  userId       String
}

model Room {
  id        String  @id @unique @default(cuid())
  variant   Variant @relation(fields: [variantId], references: [id])
  private   Boolean
  password  String?
  variantId String
}

enum ConnectionService {
  TWITCH
  DISCORD
  RACETIME
}
